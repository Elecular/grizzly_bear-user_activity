# This workflow is used for deploying this application to Google Kubernetes Engine.
# These are the following steps in order to setup the deployment workflow:
#   1. Setup the following secrets in the repository:
#       a. GKE_PROJECT
#       b. GKE_EMAIL
#       b. GKE_KEY
#   2. Then set the following environment variables in this file:
#       a. DEPLOYMENT_NAME
#       b. IMAGE
#   3. Once this is setup, you can trigger a deployment event (https://developer.github.com/v3/repos/deployments/#create-a-deployment)
#       a. Set the environment to stage/prod
#       b. Add the following fields to the payload:
#           1. gke_cluster
#           2. gke_zone 

name: Deploy To GKE

on: 
    deployment

env:
    GKE_PROJECT: ${{ secrets.GKE_PROJECT }}
    GKE_EMAIL: ${{ secrets.GKE_EMAIL }}
    GKE_KEY: ${{secrets.GKE_KEY}}
    GITHUB_SHA: ${{ github.sha }}
    GITHUB_AUTH_TOKEN: ${{github.token}}
    GITHUB_REPOSITORY: ${{ github.repository }}
    GKE_ZONE: ${{ github.event.deployment.payload.gke_zone }}
    GKE_CLUSTER: ${{ github.event.deployment.payload.gke_cluster }}
    ENVIRONMENT: ${{ github.event.deployment.environment }}
    DEPLOYMENT_NAME: user-activity
    DEPLOYMENT_ID: ${{ github.event.deployment.id }}
    IMAGE: user-activity
    REGISTRY_HOSTNAME: gcr.io

jobs:
    deploy:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2

            # Setup gcloud CLI
            - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
              with:
                  version: "270.0.0"
                  service_account_email: ${{ env.GKE_EMAIL }}
                  service_account_key: ${{ env.GKE_KEY }}

            # Configure docker to use the gcloud command-line tool as a credential helper
            - run: |
                  # Set up docker to authenticate
                  # via gcloud command-line tool.
                  gcloud auth configure-docker

            # Build the Docker image for Web
            - name: Build Web Docker Image
              run: |
                  docker build \
                    -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$GKE_CLUSTER"/web/"$IMAGE":"$GITHUB_SHA" \
                    -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$GKE_CLUSTER"/web/"$IMAGE":latest \
                    --build-arg GITHUB_SHA="$GITHUB_SHA" \
                    --build-arg GITHUB_REF="$GITHUB_REF" \
                    -f app/Dockerfile app/

            # Build the Docker image for Batch
            - name: Build Batch Docker Image
              run: |
                  docker build \
                    -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$GKE_CLUSTER"/batch/"$IMAGE":"$GITHUB_SHA" \
                    -t "$REGISTRY_HOSTNAME"/"$GKE_PROJECT"/"$GKE_CLUSTER"/batch/"$IMAGE":latest \
                    --build-arg GITHUB_SHA="$GITHUB_SHA" \
                    --build-arg GITHUB_REF="$GITHUB_REF" \
                    -f batch/Dockerfile batch/

            # Push the Web Docker image to Google Container Registry
            - name: Publish Web Docker Image
              run: |
                  docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/"$GKE_CLUSTER"/web/$IMAGE

             # Push the BatchDocker image to Google Container Registry
            - name: Publish Batch Docker Image
              run: |
                  docker push $REGISTRY_HOSTNAME/$GKE_PROJECT/"$GKE_CLUSTER"/batch/$IMAGE

            # Deploy the Docker image to the GKE cluster
            - name: Deploy
              run: |
                  gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
                  cd kubernetes/overlays/$ENVIRONMENT
                  curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
                  chmod u+x ./kustomize
                  ./kustomize edit set image WEB_DOCKER_IMAGE=$REGISTRY_HOSTNAME/$GKE_PROJECT/"$GKE_CLUSTER"/web/$IMAGE:$GITHUB_SHA
                  ./kustomize edit set image BATCH_DOCKER_IMAGE=$REGISTRY_HOSTNAME/$GKE_PROJECT/"$GKE_CLUSTER"/batch/$IMAGE:$GITHUB_SHA
                  ./kustomize build . | kubectl apply -f -
                  kubectl rollout status deployment/$DEPLOYMENT_NAME
                  kubectl get services -o wide

            - name: Cleanup Old Web Images
              run: |
                  gcloud container images list-tags $REGISTRY_HOSTNAME/$GKE_PROJECT/$GKE_CLUSTER/web/$IMAGE --limit=999999 --sort-by=~TIMESTAMP \
                  | awk '{print $1}' | tail -n +52 | \
                  xargs -I XXX gcloud container images delete -q --force-delete-tags $REGISTRY_HOSTNAME/$GKE_PROJECT/$GKE_CLUSTER/web/$IMAGE@sha256:XXX

            - name: Cleanup Old Batch Images
              run: |
                  gcloud container images list-tags $REGISTRY_HOSTNAME/$GKE_PROJECT/$GKE_CLUSTER/batch/$IMAGE --limit=999999 --sort-by=~TIMESTAMP \
                  | awk '{print $1}' | tail -n +52 | \
                  xargs -I XXX gcloud container images delete -q --force-delete-tags $REGISTRY_HOSTNAME/$GKE_PROJECT/$GKE_CLUSTER/batch/$IMAGE@sha256:XXX

            # If all steps pass, we will mark the deployment as success
            - name: Update Success Stats
              if: success()
              run: |
                  curl --location --request POST "https://api.github.com/repos/$GITHUB_REPOSITORY/deployments/$DEPLOYMENT_ID/statuses" \
                  --header "Authorization: token $GITHUB_AUTH_TOKEN" \
                  --header 'Content-Type: application/json' \
                  --data-raw '{
                      "state": "success"
                  }'

            # If all steps fail, we will mark the deployment as failed
            - name: Update Failure Stats
              if: failure()
              run: |
                  curl --location --request POST "https://api.github.com/repos/$GITHUB_REPOSITORY/deployments/$DEPLOYMENT_ID/statuses" \
                  --header "Authorization: token $GITHUB_AUTH_TOKEN" \
                  --header 'Content-Type: application/json' \
                  --data-raw '{
                      "state": "failure"
                  }'
